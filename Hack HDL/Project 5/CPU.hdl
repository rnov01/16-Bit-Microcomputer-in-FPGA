// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //Mux1 decodes instruction bit and determines if a or c instruction
    //if c instruction
    Mux16(a=instruction , b=aluout , sel=instruction[15] , out=mux1out );

    //And(a=instruction[15] , b=instruction[5] , out=writeA );
    Mux(a=true , b=instruction[5] , sel=instruction[15] , out=loadA );
    ARegister(in=mux1out , load=loadA , out=aregout, out[0..14]=addressM );

    Mux16(a=aregout , b=inM , sel=instruction[12] , out=mux2out );

    
    
    And(a=instruction[15] , b=instruction[4] , out=writeD );
    DRegister(in=din , load=writeD , out=dout );
    ALU(x=dout , y=mux2out , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=din, out=aluout, out=outM, zr=zrout , ng=ngout );
    
    And(a=instruction[1] , b=zrout , out=j1andzr );
    
    Not(in=zrout , out=notzr );
    Not(in=ngout , out=notng );
    And(a=instruction[0] , b=notzr , out=j0andnotzr );
    And(a=j0andnotzr , b=notng , out=j0andnotzrandnotng );

    And(a=instruction[2] , b=notzr , out=j2andnotzr );
    And(a=j2andnotzr , b=ngout , out=j2andnotzrandng );

    Or(a=j1andzr , b=j0andnotzrandnotng , out=loadlogic1 );
    Or(a=loadlogic1, b=j2andnotzrandng , out=loadlogic2 );
    And(a=instruction[15] , b=loadlogic2 , out=loadlogic );



    PC(in=aregout , load=loadlogic , inc=true , reset=reset , out[0..14]=pc );

    And(a=instruction[15] , b=instruction[3] , out=writeM );
    //Mux16(a=false , b=aluout , sel=outsel , out=outM );
    //Mux16(a=false , b=aregoutmux , sel=instruction[15] , out[0..14]=addressM );
    //Mux(a=false , b=true , sel=writeMem , out=writeM );
}