// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//// 2 MSB from address used to determine what memory is accessed (RAM16, Screen or keyboard)
    //Remaining bits used to select register w/in memory
    //DMux4Way(in=load , sel=address[13..14], a=r16in1, b=r16in2 , c=scrn, d=keyin);
    //Or(a=r16in1 , b=r16in2 , out=rin, out=r16flag );

    DMux(in=load , sel=address[14] , a=ramLoad , b=screenLoad );
    RAM16K(in=in, load=ramLoad , address=address[0..13] , out=rout);
    Screen(in=in , load=screenLoad , address=address[0..12] , out=sout );
    
    //keyboard logic throws a flag 2 MSB address bits are both 1 
    Keyboard(out=kout );
    //Or8Way(in=kout1 , out=kflag1 );
    //Or8Way(in=kout2 , out=kflag2 );
    //Or(a=kflag1 , b=kflag2 , out=kflag );
    //And(a=address[14] , b=address[13] , out=ksel );
    //Mux(a=false , b=true , sel=ksel , out=k );
    
    //output flag goes to 1 if msb address bits are 00 or 01 
    //1 indicates ram16 should be output
    //0 indicates screen should be output
    //k flag then determines if selected memory should be output or keyboard
    //Not(in=address[14] , out=not14 );
    //Not(in=address[13] , out=not13 );
    //And(a=not14 , b=not13 , out=outflag1 );
    //And(a=not14 , b=address[13] , out=outflag2 );
    //Or(a=outflag1 , b=outflag2 , out=outflag );
    //Mux16(a=out2 , b=out1 , sel=outflag, out=rout );
    //Mux16(a=rout , b=kout , sel=k , out=out );
    
    Mux4Way16(a=rout , b=rout , c=sout , d=kout , sel=address[13..14] , out=out );
    //Register(in=keyin , load= , out= );


    }